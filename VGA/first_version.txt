

module datapath(
	input clk,
	input resetn,
	input [9:0]data_in,
	input ld_x, ld_y, ld_colour, enable,
	output reg [7:0]x_out, 
	output reg [6:0]y_out,
	output reg [2:0]colour_out
	);
	
	reg [3:0]q;
	reg [7:0]x; 
	reg [6:0]y;
	reg [2:0]colour;
		
	always@(posedge clk) begin
		if(!resetn) begin
			x <= 8'b0;
			y <= 7'b0;
			colour <= 3'b0;
		end
		else begin
			if(ld_x)
				x <= {1'b0, data_in[6:0]};
			if(ld_y)
				y <= data_in[6:0];
			if(ld_colour)
				colour <= data_in[9:7];
		end
	end
	
	always@(posedge clk) begin
		if(resetn && enable) begin
			x_out <= x + q[1:0];
			y_out <= y + q[3:2];
			colour_out <= colour;
		end
	end
	
	always@(posedge clk) begin 
		if(resetn && enable)
			q <= q + 1;
		else 
			q <= 0;
	end	
		
endmodule			
	
module control(
	input clk,
	input resetn,
	input [3:0]keys,
	
	output reg ld_x, ld_y, ld_colour, enable
	);
	
	reg [5:0]current_state, next_state;
	wire loadx;
	wire loady;
	
	assign loadx = ~keys[3];
	assign loady = ~keys[1];
	
	localparam S_LOAD_X = 5'd0,
	           S_LOAD_WAIT_X = 5'd1,
				  S_LOAD_Y = 5'd2,
				  S_LOAD_WAIT_Y = 5'd3,
				  S_LOAD_DRAW = 5'd4;
				  
	 always@(*)
	 begin: state_table
				case (current_state)
					S_LOAD_X: next_state = loadx ? S_LOAD_WAIT_X : S_LOAD_X;
					S_LOAD_WAIT_X: next_state = loadx ? S_LOAD_Y : S_LOAD_WAIT_X;
					S_LOAD_Y: next_state = loady ? S_LOAD_WAIT_Y : S_LOAD_Y;
					S_LOAD_WAIT_Y: next_state = loady ? S_LOAD_DRAW : S_LOAD_WAIT_Y;
					S_LOAD_DRAW:
						if(!resetn)
							next_state = S_LOAD_X;
						else
							next_state = S_LOAD_DRAW;
					default: next_state = S_LOAD_X;
				endcase
	 end
	 
	 always@(*)
	 begin: enable_signals
	 
		ld_x = 1'b0;
		ld_y = 1'b0;
		ld_colour = 1'b0;
		enable = 1'b0;	
		
		case(current_state)
			S_LOAD_X: begin
				ld_x = 1'b1;
				end
			S_LOAD_Y: begin
				ld_y = 1'b1;
				ld_colour = 1'b1;
				end
			S_LOAD_DRAW: begin
				enable = 1'b1;

				end
		endcase
	 end
	  
	  always@(posedge clk)
	  begin: state_FFs
			if(!resetn)
				current_state <= S_LOAD_X;
	      else 
				current_state <= next_state;
	  end
	 
endmodule
	 
	 

module VGA_display
	(
		CLOCK_50,						//	On Board 50 MHz
		// Your inputs and outputs here
		KEY,							// On Board Keys
		SW,
		// The ports below are for the VGA output.  Do not change.
		VGA_CLK,   						//	VGA Clock
		VGA_HS,							//	VGA H_SYNC
		VGA_VS,							//	VGA V_SYNC
		VGA_BLANK_N,						//	VGA BLANK
		VGA_SYNC_N,						//	VGA SYNC
		VGA_R,   						//	VGA Red[9:0]
		VGA_G,	 						//	VGA Green[9:0]
		VGA_B   						//	VGA Blue[9:0]
	);

	input			CLOCK_50;				//	50 MHz
	input	[3:0]	KEY;	
	input [9:0] SW;
	// Declare your inputs and outputs here
	// Do not change the following outputs
	output			VGA_CLK;   				//	VGA Clock
	output			VGA_HS;					//	VGA H_SYNC
	output			VGA_VS;					//	VGA V_SYNC
	output			VGA_BLANK_N;				//	VGA BLANK
	output			VGA_SYNC_N;				//	VGA SYNC
	output	[7:0]	VGA_R;   				//	VGA Red[7:0] Changed from 10 to 8-bit DAC
	output	[7:0]	VGA_G;	 				//	VGA Green[7:0]
	output	[7:0]	VGA_B;   				//	VGA Blue[7:0]
	
	wire resetn;
	assign resetn = KEY[0];
	
	// Create the colour, x, y and writeEn wires that are inputs to the controller.

	wire [2:0] colour;
	wire [7:0] x;
	wire [6:0] y;
	wire writeEn;

	// Create an Instance of a VGA controller - there can be only one!
	// Define the number of colours as well as the initial background
	// image file (.MIF) for the controller.
	vga_adapter VGA(
			.resetn(resetn),
			.clock(CLOCK_50),
			.colour(colour),
			.x(x),
			.y(y),
			.plot(writeEn),
			/* Signals for the DAC to drive the monitor. */
			.VGA_R(VGA_R),
			.VGA_G(VGA_G),
			.VGA_B(VGA_B),
			.VGA_HS(VGA_HS),
			.VGA_VS(VGA_VS),
			.VGA_BLANK(VGA_BLANK_N),
			.VGA_SYNC(VGA_SYNC_N),
			.VGA_CLK(VGA_CLK));
		defparam VGA.RESOLUTION = "160x120";
		defparam VGA.MONOCHROME = "FALSE";
		defparam VGA.BITS_PER_COLOUR_CHANNEL = 1;
		defparam VGA.BACKGROUND_IMAGE = "black.mif";
			
	// Put your code here. Your code should produce signals x,y,colour and writeEn
	// for the VGA controller, in addition to any other functionality your design may require.
	part2 u0(CLOCK_50, SW, KEY, resetn, x, y, colour, writeEn);
	
endmodule


module part2(
		input clk,
		input [9:0]data_in,
		input [3:0]keys,
		input resetn,
		output [7:0]out_x,
		output [6:0]out_y,
		output [2:0]out_colour,
		output out_writeEn
		);
		
		wire ld_x, ld_y, ld_colour;
		
		control C0(clk, resetn, keys, ld_x, ld_y, ld_colour, out_writeEn);
		
		datapath D0(clk, resetn, data_in, ld_x, ld_y, ld_colour, out_writeEn, out_x, out_y, out_colour);
endmodule

